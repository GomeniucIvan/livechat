<Project Sdk="Microsoft.NET.Sdk.Web">

	<Import Project="..\Smartstore.Data\Smartstore.Common.props" />
	<Import Project="..\Smartstore.Data\Smartstore.Razor.props" />

	<PropertyGroup>
		<UserSecretsId>b35c0f56-dfa8-4120-b29b-a677578afcd1</UserSecretsId>
		<CopyRefAssembliesToPublishDirectory>true</CopyRefAssembliesToPublishDirectory>
		<RuntimeIdentifiers>win-x64; win-x86; linux-x64; osx-x64</RuntimeIdentifiers>
		<TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
		<TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
		<IsPackable>false</IsPackable>
		<SpaRoot>ClientApp\</SpaRoot>
		<DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
		<SpaProxyServerUrl>https://localhost:44442</SpaProxyServerUrl>
		<SpaProxyLaunchCommand>npm start</SpaProxyLaunchCommand>
		<ImplicitUsings>enable</ImplicitUsings>
		<!--<PublishReadyToRun>true</PublishReadyToRun>-->
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Autofac.Extensions.DependencyInjection" Version="8.0.0" />
		<PackageReference Include="FluentValidation.AspNetCore" Version="9.5.3" />
		<PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="6.0.7" />
		<PackageReference Include="Microsoft.ClearScript.V8.Native.linux-x64" Version="7.3.1" />
		<PackageReference Include="Microsoft.ClearScript.V8.Native.osx-x64" Version="7.3.1" />
		<PackageReference Include="Microsoft.ClearScript.V8.Native.win-x64" Version="7.3.1" />
		<PackageReference Include="Microsoft.ClearScript.V8.Native.win-x86" Version="7.3.1" />
		<PackageReference Include="Microsoft.AspNetCore.SpaProxy" Version="6.0.8" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="6.0.7">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\Smartstore.Data\Smartstore.Data.SqlServer\Smartstore.Data.SqlServer.csproj" />
		<ProjectReference Include="..\Smartstore\Smartstore.csproj" />
		<ProjectReference Include="..\Smartstore.Core\Smartstore.Core.csproj" />
		<ProjectReference Include="..\Smartstore.Web.Common\Smartstore.Web.Common.csproj" />
	</ItemGroup>
	
	<ItemGroup>
		<Compile Remove="App_Data\**" />
		<Compile Remove="Areas\**" />
		<Content Remove="App_Data\**" />
		<Content Remove="Areas\**" />
		<EmbeddedResource Remove="App_Data\**" />
		<EmbeddedResource Remove="Areas\**" />
		<None Remove="App_Data\**" />
		<None Remove="Areas\**" />
	</ItemGroup>
	
	<!-- Copy publishable files in App_Data directory -->
	<ItemGroup>
		<None Include="App_Data\EmailTemplates\**" CopyToPublishDirectory="PreserveNewest" />
		<None Include="App_Data\Geo\**" CopyToPublishDirectory="PreserveNewest" />
		<None Include="App_Data\Localization\**" CopyToPublishDirectory="PreserveNewest" />
		<None Include="App_Data\Samples\**" CopyToPublishDirectory="PreserveNewest" />
	</ItemGroup>

	<!-- Copy publishable files in Areas directory -->

	<!-- Copy publishable files in Views directory -->
    
    <!-- Don't publish static/raw files -->

	<ItemGroup>
		<Content Update="appsettings.Development.json" CopyToPublishDirectory="Never">
			<CopyToOutputDirectory>Never</CopyToOutputDirectory>
		</Content>
		<Content Update="Config\usersettings.Development.json" CopyToPublishDirectory="Never">
			<CopyToOutputDirectory>Never</CopyToOutputDirectory>
		</Content>
		<Content Update="Config\usersettings.json" CopyToPublishDirectory="PreserveNewest">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</Content>
	</ItemGroup>

	<PropertyGroup>
		<!--Set this parameter to true to get the dlls copied from the NuGet cache to the output of your project-->
		<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
		<AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>

		<!--The common language runtime (CLR) supports two types of garbage collection:
		workstation garbage collection, which is available on all systems, and server garbage collection,
		which is available on multiprocessor systems.
      
		For single-processor computers, the default workstation garbage collection should be the fastest option.
		Either workstation or server can be used for two-processor computers.
		Server garbage collection should be the fastest option for more than two processors.
      
		More details about GC you can see here: https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals-->
		<ServerGarbageCollection>false</ServerGarbageCollection>
		
		<!--In workstation or server garbage collection, you can enable concurrent garbage collection,
		which enables threads to run concurrently with a dedicated thread that performs the garbage
		collection for most of the duration of the collection.
      
		Concurrent garbage collection enables interactive applications to be more responsive by
		minimizing pauses for a collection. Managed threads can continue to run most of the time while
		the concurrent garbage collection thread is running. This results in shorter pauses while
		a garbage collection is occurring.
      
		To improve performance when several processes are running, disable concurrent garbage collection.
      
		More details here: https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals#concurrent-garbage-collection-->
		<ConcurrentGarbageCollection>false</ConcurrentGarbageCollection>
		
		<AssemblyName>Smartstore.Web</AssemblyName>
	</PropertyGroup>

</Project>
